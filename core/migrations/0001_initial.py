# Generated by Django 5.2.6 on 2025-09-18 22:21

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.CharField(max_length=20, unique=True)),
                ('season', models.IntegerField(validators=[django.core.validators.MinValueValidator(2025), django.core.validators.MaxValueValidator(2025)])),
                ('week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('game_type', models.CharField(default='REG', max_length=10)),
                ('game_date', models.DateTimeField()),
                ('game_time_et', models.CharField(blank=True, max_length=10)),
                ('week_name', models.CharField(blank=True, max_length=20)),
                ('season_type', models.CharField(default='REG', max_length=10)),
                ('completed', models.BooleanField(default=False)),
                ('home_score', models.IntegerField(blank=True, null=True)),
                ('away_score', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-game_date'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.CharField(max_length=20, unique=True)),
                ('player_name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=5)),
                ('jersey_number', models.IntegerField(blank=True, null=True)),
                ('height', models.CharField(blank=True, max_length=10)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['player_name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_abbr', models.CharField(max_length=3, unique=True)),
                ('team_name', models.CharField(max_length=50)),
                ('team_city', models.CharField(max_length=50)),
                ('team_color_primary', models.CharField(default='#000000', max_length=7)),
                ('team_color_secondary', models.CharField(default='#FFFFFF', max_length=7)),
            ],
            options={
                'ordering': ['team_abbr'],
            },
        ),
        migrations.CreateModel(
            name='CachedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(max_length=50)),
                ('season', models.IntegerField()),
                ('week', models.IntegerField(blank=True, null=True)),
                ('data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('data_type', 'season', 'week')},
            },
        ),
        migrations.CreateModel(
            name='GamePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_win_probability', models.FloatField()),
                ('away_win_probability', models.FloatField()),
                ('model_version', models.CharField(default='1.0', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.game')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prop_type', models.CharField(max_length=20)),
                ('predicted_value', models.FloatField()),
                ('confidence_band_lower', models.FloatField()),
                ('confidence_band_upper', models.FloatField()),
                ('over_probability', models.FloatField()),
                ('under_probability', models.FloatField()),
                ('model_line', models.FloatField()),
                ('user_line', models.FloatField(blank=True, null=True)),
                ('edge', models.FloatField(blank=True, null=True)),
                ('rationale', models.TextField(blank=True)),
                ('model_version', models.CharField(default='1.0', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.game')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.player')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField(validators=[django.core.validators.MinValueValidator(2025), django.core.validators.MaxValueValidator(2025)])),
                ('week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('game_id', models.CharField(max_length=20)),
                ('player_id', models.CharField(max_length=20)),
                ('player_name', models.CharField(max_length=100)),
                ('team', models.CharField(max_length=10)),
                ('opp', models.CharField(max_length=10)),
                ('prop_type', models.CharField(max_length=30)),
                ('line_value', models.FloatField()),
                ('book', models.CharField(default='PrizePicks', max_length=20)),
                ('board_time', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-board_time', 'player_name'],
                'indexes': [models.Index(fields=['season', 'week', 'prop_type', 'team', 'opp'], name='core_propli_season_99ceb1_idx'), models.Index(fields=['game_id', 'player_id'], name='core_propli_game_id_9a9ae0_idx')],
            },
        ),
        migrations.AddField(
            model_name='player',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.team'),
        ),
        migrations.AddField(
            model_name='game',
            name='away_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_games', to='core.team'),
        ),
        migrations.AddField(
            model_name='game',
            name='home_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_games', to='core.team'),
        ),
        migrations.CreateModel(
            name='PlayerStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField(validators=[django.core.validators.MinValueValidator(2025), django.core.validators.MaxValueValidator(2025)])),
                ('week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('passing_attempts', models.IntegerField(default=0)),
                ('passing_completions', models.IntegerField(default=0)),
                ('passing_yards', models.IntegerField(default=0)),
                ('passing_tds', models.IntegerField(default=0)),
                ('passing_ints', models.IntegerField(default=0)),
                ('passing_rating', models.FloatField(blank=True, null=True)),
                ('rushing_attempts', models.IntegerField(default=0)),
                ('rushing_yards', models.IntegerField(default=0)),
                ('rushing_tds', models.IntegerField(default=0)),
                ('receiving_targets', models.IntegerField(default=0)),
                ('receiving_receptions', models.IntegerField(default=0)),
                ('receiving_yards', models.IntegerField(default=0)),
                ('receiving_tds', models.IntegerField(default=0)),
                ('air_yards', models.IntegerField(default=0)),
                ('yac', models.IntegerField(default=0)),
                ('adot', models.FloatField(blank=True, null=True)),
                ('target_share', models.FloatField(blank=True, null=True)),
                ('snap_share', models.FloatField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.player')),
            ],
            options={
                'ordering': ['-week', 'player'],
                'unique_together': {('player', 'game')},
            },
        ),
        migrations.CreateModel(
            name='PropProjection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField(validators=[django.core.validators.MinValueValidator(2025), django.core.validators.MaxValueValidator(2025)])),
                ('week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('game_id', models.CharField(max_length=20)),
                ('player_id', models.CharField(max_length=20)),
                ('prop_type', models.CharField(max_length=30)),
                ('mean', models.FloatField()),
                ('p10', models.FloatField()),
                ('p50', models.FloatField()),
                ('p90', models.FloatField()),
                ('win_prob_over', models.FloatField()),
                ('edge_pct', models.FloatField()),
                ('model_version', models.CharField(default='v1', max_length=20)),
                ('features_json', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prop_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projections', to='core.propline')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('prop_line', 'model_version')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='game',
            unique_together={('season', 'week', 'home_team', 'away_team')},
        ),
        migrations.CreateModel(
            name='TeamStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.IntegerField(validators=[django.core.validators.MinValueValidator(2025), django.core.validators.MaxValueValidator(2025)])),
                ('week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('is_home', models.BooleanField(default=False)),
                ('total_plays', models.IntegerField(default=0)),
                ('pass_attempts', models.IntegerField(default=0)),
                ('rush_attempts', models.IntegerField(default=0)),
                ('total_yards', models.IntegerField(default=0)),
                ('passing_yards', models.IntegerField(default=0)),
                ('rushing_yards', models.IntegerField(default=0)),
                ('points_scored', models.IntegerField(default=0)),
                ('sacks', models.IntegerField(default=0)),
                ('interceptions', models.IntegerField(default=0)),
                ('fumbles_recovered', models.IntegerField(default=0)),
                ('points_allowed', models.IntegerField(default=0)),
                ('epa_per_play', models.FloatField(blank=True, null=True)),
                ('success_rate', models.FloatField(blank=True, null=True)),
                ('pace', models.FloatField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.game')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.team')),
            ],
            options={
                'ordering': ['-week', 'team'],
                'unique_together': {('team', 'game')},
            },
        ),
    ]
